// if statement
    There can be zero or more elif parts, and the else part is optional. 
    The keyword ‘elif’ is short for ‘else if’, 
        and is useful to avoid excessive indentation. 
    An if … elif … elif … sequence is a substitute for the 
        switch or case statements found in other languages.

// for statement
    The for statement in Python differs a bit from what you may 
        be used to in C or Pascal. 
    Rather than always iterating over an arithmetic progression 
        of numbers (like in Pascal), 
        or giving the user the ability to define 
        both the iteration step and halting condition (as C), 
    Python’s for statement iterates over the items 
        of any sequence (a list or a string), 
        in the order that they appear in the sequence. 

// range function
    If you do need to iterate over a sequence of numbers, 
        the built-in function range() comes in handy. 
    It generates arithmetic progressions.
    In many ways the object returned by range() behaves as 
        if it is a list, but in fact it isn’t. 
    It is an object which returns the successive items of 
        the desired sequence when you iterate over it, 
        but it doesn’t really make the list, thus saving space.

// break statement, 
    like in C, breaks out of the innermost enclosing for or while loop.

// pass statement 
    does nothing. 
    It can be used when a statement is  required syntactically 
        but the program requires no action

// continue statement, 
    continues with the next iteration of the loop

//  match statement 
    takes an expression and compares its value to 
        successive patterns given as one or more case blocks. 
    This is superficially similar to a switch statement in C, Java or JavaScript 
        (and many other languages), but it can also extract components 
        (sequence elements or object attributes) from the value into variables.