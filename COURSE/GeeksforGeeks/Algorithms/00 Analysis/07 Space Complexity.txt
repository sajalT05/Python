Space Complexity
    of an algorithm is the total space taken by the algorithm 
        with respect to the input size. 
    Space complexity includes both Auxiliary space and space used by input.
    Auxiliary Space is the extra space or temporary space used by an algorithm.
    parallel concept to time complexity. 
        If we need to create an array of size n, 
            this will require O(n) space. 
        If we create a two-dimensional array of size n*n, 
            this will require O(n2) space.
    However, just because you have n calls total doesnâ€™t mean it takes O(n) space.

// 
int add (int n){
    if (n <= 0){
        return 0;
    }
    return n + add (n-1);
}

Here each call add a level to the stack :

1.  add(4)
2.    -> add(3)
3.      -> add(2)
4.        -> add(1)
5.          -> add(0)

// Each of these calls is added to call stack and takes up actual memory. 
    So it takes O(n) space.

//
int addSequence (int n){
    int sum = 0;
    for (int i = 0; i < n; i++){
        sum += pairSum(i, i+1);
    }
    return sum;
}

int pairSum(int x, int y){
    return x + y;
}

// There will be roughly O(n) calls to pairSum. However, those 
    calls do not exist simultaneously on the call stack,
    so you only need O(1) space.

